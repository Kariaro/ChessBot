package me.hardcoded.chess.advanced;

import me.hardcoded.chess.open.Move;

/**
 * This class contains information about precomputed numbers.
 *
 * @author HardCoded
 */
public final class PrecomputedTable {
	public static final long[] KNIGHT_MOVES = {
		0x0000000000020400L, 0x0000000000050800L, 0x00000000000a1100L, 0x0000000000142200L,
		0x0000000000284400L, 0x0000000000508800L, 0x0000000000a01000L, 0x0000000000402000L,
		0x0000000002040004L, 0x0000000005080008L, 0x000000000a110011L, 0x0000000014220022L,
		0x0000000028440044L, 0x0000000050880088L, 0x00000000a0100010L, 0x0000000040200020L,
		0x0000000204000402L, 0x0000000508000805L, 0x0000000a1100110aL, 0x0000001422002214L,
		0x0000002844004428L, 0x0000005088008850L, 0x000000a0100010a0L, 0x0000004020002040L,
		0x0000020400040200L, 0x0000050800080500L, 0x00000a1100110a00L, 0x0000142200221400L,
		0x0000284400442800L, 0x0000508800885000L, 0x0000a0100010a000L, 0x0000402000204000L,
		0x0002040004020000L, 0x0005080008050000L, 0x000a1100110a0000L, 0x0014220022140000L,
		0x0028440044280000L, 0x0050880088500000L, 0x00a0100010a00000L, 0x0040200020400000L,
		0x0204000402000000L, 0x0508000805000000L, 0x0a1100110a000000L, 0x1422002214000000L,
		0x2844004428000000L, 0x5088008850000000L, 0xa0100010a0000000L, 0x4020002040000000L,
		0x0400040200000000L, 0x0800080500000000L, 0x1100110a00000000L, 0x2200221400000000L,
		0x4400442800000000L, 0x8800885000000000L, 0x100010a000000000L, 0x2000204000000000L,
		0x0004020000000000L, 0x0008050000000000L, 0x00110a0000000000L, 0x0022140000000000L,
		0x0044280000000000L, 0x0088500000000000L, 0x0010a00000000000L, 0x0020400000000000L,
	};
	
	public static final long[] KING_MOVES = {
		0x0000000000000302L, 0x0000000000000705L, 0x0000000000000e0aL, 0x0000000000001c14L,
		0x0000000000003828L, 0x0000000000007050L, 0x000000000000e0a0L, 0x000000000000c040L,
		0x0000000000030203L, 0x0000000000070507L, 0x00000000000e0a0eL, 0x00000000001c141cL,
		0x0000000000382838L, 0x0000000000705070L, 0x0000000000e0a0e0L, 0x0000000000c040c0L,
		0x0000000003020300L, 0x0000000007050700L, 0x000000000e0a0e00L, 0x000000001c141c00L,
		0x0000000038283800L, 0x0000000070507000L, 0x00000000e0a0e000L, 0x00000000c040c000L,
		0x0000000302030000L, 0x0000000705070000L, 0x0000000e0a0e0000L, 0x0000001c141c0000L,
		0x0000003828380000L, 0x0000007050700000L, 0x000000e0a0e00000L, 0x000000c040c00000L,
		0x0000030203000000L, 0x0000070507000000L, 0x00000e0a0e000000L, 0x00001c141c000000L,
		0x0000382838000000L, 0x0000705070000000L, 0x0000e0a0e0000000L, 0x0000c040c0000000L,
		0x0003020300000000L, 0x0007050700000000L, 0x000e0a0e00000000L, 0x001c141c00000000L,
		0x0038283800000000L, 0x0070507000000000L, 0x00e0a0e000000000L, 0x00c040c000000000L,
		0x0302030000000000L, 0x0705070000000000L, 0x0e0a0e0000000000L, 0x1c141c0000000000L,
		0x3828380000000000L, 0x7050700000000000L, 0xe0a0e00000000000L, 0xc040c00000000000L,
		0x0203000000000000L, 0x0507000000000000L, 0x0a0e000000000000L, 0x141c000000000000L,
		0x2838000000000000L, 0x5070000000000000L, 0xa0e0000000000000L, 0x40c0000000000000L,
	};
	
	public static final long[] PAWN_ATTACK_WHITE = {
		0x0000000000000200L, 0x0000000000000500L, 0x0000000000000a00L, 0x0000000000001400L,
		0x0000000000002800L, 0x0000000000005000L, 0x000000000000a000L, 0x0000000000004000L,
		0x0000000000020000L, 0x0000000000050000L, 0x00000000000a0000L, 0x0000000000140000L,
		0x0000000000280000L, 0x0000000000500000L, 0x0000000000a00000L, 0x0000000000400000L,
		0x0000000002000000L, 0x0000000005000000L, 0x000000000a000000L, 0x0000000014000000L,
		0x0000000028000000L, 0x0000000050000000L, 0x00000000a0000000L, 0x0000000040000000L,
		0x0000000200000000L, 0x0000000500000000L, 0x0000000a00000000L, 0x0000001400000000L,
		0x0000002800000000L, 0x0000005000000000L, 0x000000a000000000L, 0x0000004000000000L,
		0x0000020000000000L, 0x0000050000000000L, 0x00000a0000000000L, 0x0000140000000000L,
		0x0000280000000000L, 0x0000500000000000L, 0x0000a00000000000L, 0x0000400000000000L,
		0x0002000000000000L, 0x0005000000000000L, 0x000a000000000000L, 0x0014000000000000L,
		0x0028000000000000L, 0x0050000000000000L, 0x00a0000000000000L, 0x0040000000000000L,
		0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
		0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
		0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
		0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
	};
	
	public static final long[] PAWN_ATTACK_BLACK = {
		0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
		0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
		0x0000000000000002L, 0x0000000000000005L, 0x000000000000000aL, 0x0000000000000014L,
		0x0000000000000028L, 0x0000000000000050L, 0x00000000000000a0L, 0x0000000000000040L,
		0x0000000000000200L, 0x0000000000000500L, 0x0000000000000a00L, 0x0000000000001400L,
		0x0000000000002800L, 0x0000000000005000L, 0x000000000000a000L, 0x0000000000004000L,
		0x0000000000020000L, 0x0000000000050000L, 0x00000000000a0000L, 0x0000000000140000L,
		0x0000000000280000L, 0x0000000000500000L, 0x0000000000a00000L, 0x0000000000400000L,
		0x0000000002000000L, 0x0000000005000000L, 0x000000000a000000L, 0x0000000014000000L,
		0x0000000028000000L, 0x0000000050000000L, 0x00000000a0000000L, 0x0000000040000000L,
		0x0000000200000000L, 0x0000000500000000L, 0x0000000a00000000L, 0x0000001400000000L,
		0x0000002800000000L, 0x0000005000000000L, 0x000000a000000000L, 0x0000004000000000L,
		0x0000020000000000L, 0x0000050000000000L, 0x00000a0000000000L, 0x0000140000000000L,
		0x0000280000000000L, 0x0000500000000000L, 0x0000a00000000000L, 0x0000400000000000L,
		0x0002000000000000L, 0x0005000000000000L, 0x000a000000000000L, 0x0014000000000000L,
		0x0028000000000000L, 0x0050000000000000L, 0x00a0000000000000L, 0x0040000000000000L,
	};
	
	private static long[] computePawnAttackMoves(boolean isWhite) {
		long[] array = new long[64];
		
		for (int i = 0; i < 64; i++) {
			int ypos = i >>> 3;
			int xpos = i & 7;
			long moves = 0;
			
			if (isWhite) {
				if (ypos < 6) {
					if (xpos > 0) {
						moves |= 1L << (xpos - 1L + ((ypos + 1L) << 3L));
					}
					
					if (xpos < 7) {
						moves |= 1L << (xpos + 1L + ((ypos + 1L) << 3L));
					}
				}
			} else {
				if (ypos > 0) {
					if (xpos > 0) {
						moves |= 1L << (xpos - 1L + ((ypos - 1L) << 3L));
					}
					
					if (xpos < 7) {
						moves |= 1L << (xpos + 1L + ((ypos - 1L) << 3L));
					}
				}
			}
			
			array[i] = moves;
		}
		
		return array;
	}
	
	private static long[] computeKingMoves() {
		long[] array = new long[64];
		
		for (int i = 0; i < 64; i++) {
			int ypos = i >>> 3;
			int xpos = i & 7;
			long moves = 0;
			
			for (int j = 0; j < 9; j ++) {
				if (j == 4) {
					continue;
				}
				
				int xp = xpos + (j % 3) - 1;
				int yp = ypos + (j / 3) - 1;
				
				if (xp < 0 || xp > 7 || yp < 0 || yp > 7) {
					continue;
				}
				
				moves |= 1L << (xp + (yp << 3L));
			}
			
			array[i] = moves;
		}
		
		return array;
	}
	
	private static long[] computeKnightMoves() {
		long[] array = new long[64];
		int[] offsets = { -1, -2, 1, -2, 2, -1, 2, 1, 1, 2, -1, 2, -2, 1, -2, -1 };
		
		for (int i = 0; i < 64; i++) {
			int ypos = i >>> 3;
			int xpos = i & 7;
			long moves = 0;
			
			for (int j = 0; j < 16; j += 2) {
				int xp = xpos + offsets[j];
				int yp = ypos + offsets[j + 1];
				
				if (xp < 0 || xp > 7 || yp < 0 || yp > 7) {
					continue;
				}
				
				moves |= 1L << (xp + (yp << 3L));
			}
			
			array[i] = moves;
		}
		
		return array;
	}
	
	private static String getLongString(String name, long[] array) {
		StringBuilder sb = new StringBuilder();
		sb.append("public static final long[] ").append(name).append(" = {");
		for (int i = 0; i < array.length; i++) {
			if ((i & 3) == 0) {
				sb.append("\n\t");
			} else {
				sb.append(" ");
			}
			
			sb.append("0x%016xL,".formatted(array[i]));
		}
		
		return sb.append("\n};").toString();
	}
	
	public static void main(String[] args) {
		// System.out.println(getLongString("KNIGHT_MOVES", computeKnightMoves()));
		// System.out.println(getLongString("KING_MOVES", computeKingMoves()));
		// System.out.println(getLongString("PAWN_ATTACK_WHITE", computePawnAttackMoves(true)));
		// System.out.println(getLongString("PAWN_ATTACK_BLACK", computePawnAttackMoves(false)));
	}
}
